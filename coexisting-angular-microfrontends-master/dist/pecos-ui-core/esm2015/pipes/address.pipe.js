import { Pipe } from '@angular/core';
import { TitleCasePipe } from '@angular/common';
import { ZipCodePipe } from './zip-code.pipe';
import * as i0 from "@angular/core";
export class AddressPipe {
    transform(o, isHTML = false, applyTitleCase = true, pattern = 'default', emptyValue = '-') {
        if (!o)
            return emptyValue;
        let line1 = o.addressLine1 || o.addrLine1 || o.street1 || '';
        let line2 = o.addressLine2 || o.addrLine2 || o.street2 || '';
        let city = o.city || o.cityName || '';
        let state = o.state || o.stateCd || o.stateCode || o.addressStateCode || '';
        let zip = o.zip || o.zipCd || o.zipCode || o.zipcode || '';
        const all = line1 + line2 + city + state + zip;
        if (all.trim() === '')
            return emptyValue;
        if (zip)
            zip = new ZipCodePipe().transform(zip);
        if (applyTitleCase === true) {
            const titleCasePipe = new TitleCasePipe();
            line1 = titleCasePipe.transform(line1);
            line2 = titleCasePipe.transform(line2);
            city = titleCasePipe.transform(city);
        }
        const usps = pattern === 'usps';
        const lines = [line1];
        if (line2)
            lines.push(line2);
        if (isHTML) {
            let s = '';
            if (line1 || line2) {
                s += lines.join(usps ? ' ' : '<br>') + '<br>';
            }
            if (city)
                s += city;
            if (city && (state || zip))
                s += ', ';
            if (state)
                s += state;
            if (s.length)
                s += '<br>';
            if (zip)
                s += zip;
            return `<address>${s}</address>`;
        }
        else {
            return [lines.join(' '), city, state, zip]
                .map((s) => s.trim())
                .filter((s) => s !== '')
                .join(', ');
        }
    }
}
AddressPipe.ɵfac = function AddressPipe_Factory(t) { return new (t || AddressPipe)(); };
AddressPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "address", type: AddressPipe, pure: true });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AddressPipe, [{
        type: Pipe,
        args: [{ name: 'address' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5waXBlLmpzIiwic291cmNlUm9vdCI6IkM6L3NvdXJjZS9NRkUvcGVjb3MtdWktY29yZS1tYXN0ZXIvcGVjb3MtdWktY29yZS1tYXN0ZXIvc3JjL2xpYi8iLCJzb3VyY2VzIjpbInBpcGVzL2FkZHJlc3MucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQXdCOUMsTUFBTSxPQUFPLFdBQVc7SUFDdEIsU0FBUyxDQUNQLENBQWMsRUFDZCxNQUFNLEdBQUcsS0FBSyxFQUNkLGNBQWMsR0FBRyxJQUFJLEVBQ3JCLFVBQStCLFNBQVMsRUFDeEMsVUFBVSxHQUFHLEdBQUc7UUFFaEIsSUFBSSxDQUFDLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQztRQUUxQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDN0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQzdELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLGdCQUFnQixJQUFJLEVBQUUsQ0FBQztRQUM1RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUUzRCxNQUFNLEdBQUcsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQy9DLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFBRSxPQUFPLFVBQVUsQ0FBQztRQUV6QyxJQUFJLEdBQUc7WUFBRSxHQUFHLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEQsSUFBSSxjQUFjLEtBQUssSUFBSSxFQUFFO1lBQzNCLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7WUFDMUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7UUFFRCxNQUFNLElBQUksR0FBRyxPQUFPLEtBQUssTUFBTSxDQUFDO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsSUFBSSxLQUFLO1lBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNYLElBQUksS0FBSyxJQUFJLEtBQUssRUFBRTtnQkFDbEIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQzthQUMvQztZQUNELElBQUksSUFBSTtnQkFBRSxDQUFDLElBQUksSUFBSSxDQUFDO1lBQ3BCLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztnQkFBRSxDQUFDLElBQUksSUFBSSxDQUFDO1lBQ3RDLElBQUksS0FBSztnQkFBRSxDQUFDLElBQUksS0FBSyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxDQUFDLE1BQU07Z0JBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQztZQUMxQixJQUFJLEdBQUc7Z0JBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUNsQixPQUFPLFlBQVksQ0FBQyxZQUFZLENBQUM7U0FDbEM7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO2lCQUN2QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDcEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDZjtJQUNILENBQUM7O3NFQWhEVSxXQUFXOzZEQUFYLFdBQVc7a0RBQVgsV0FBVztjQUR2QixJQUFJO2VBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBaaXBDb2RlUGlwZSB9IGZyb20gJy4vemlwLWNvZGUucGlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzc0xpa2Uge1xuICBhZGRyZXNzTGluZTE/OiBzdHJpbmc7XG4gIGFkZHJlc3NMaW5lMj86IHN0cmluZztcbiAgYWRkcmVzc1N0YXRlQ29kZT86IHN0cmluZztcbiAgYWRkckxpbmUxPzogc3RyaW5nO1xuICBhZGRyTGluZTI/OiBzdHJpbmc7XG4gIGNpdHk/OiBzdHJpbmc7XG4gIGNpdHlOYW1lPzogc3RyaW5nO1xuICBzdGF0ZUNkPzogc3RyaW5nO1xuICBzdGF0ZUNvZGU/OiBzdHJpbmc7XG4gIHN0cmVldDE/OiBzdHJpbmc7XG4gIHN0cmVldDI/OiBzdHJpbmc7XG4gIHppcD86IHN0cmluZztcbiAgemlwQ2Q/OiBzdHJpbmc7XG4gIHppcENvZGU/OiBzdHJpbmc7XG4gIHppcGNvZGU/OiBzdHJpbmc7XG4gIFt4OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIEFkZHJlc3NQaXBlUGF0dGVybnMgPSAnZGVmYXVsdCcgfCAndXNwcycgfCBzdHJpbmc7XG5cbkBQaXBlKHsgbmFtZTogJ2FkZHJlc3MnIH0pXG5leHBvcnQgY2xhc3MgQWRkcmVzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKFxuICAgIG86IEFkZHJlc3NMaWtlLFxuICAgIGlzSFRNTCA9IGZhbHNlLFxuICAgIGFwcGx5VGl0bGVDYXNlID0gdHJ1ZSxcbiAgICBwYXR0ZXJuOiBBZGRyZXNzUGlwZVBhdHRlcm5zID0gJ2RlZmF1bHQnLFxuICAgIGVtcHR5VmFsdWUgPSAnLSdcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAoIW8pIHJldHVybiBlbXB0eVZhbHVlO1xuXG4gICAgbGV0IGxpbmUxID0gby5hZGRyZXNzTGluZTEgfHwgby5hZGRyTGluZTEgfHwgby5zdHJlZXQxIHx8ICcnO1xuICAgIGxldCBsaW5lMiA9IG8uYWRkcmVzc0xpbmUyIHx8IG8uYWRkckxpbmUyIHx8IG8uc3RyZWV0MiB8fCAnJztcbiAgICBsZXQgY2l0eSA9IG8uY2l0eSB8fCBvLmNpdHlOYW1lIHx8ICcnO1xuICAgIGxldCBzdGF0ZSA9IG8uc3RhdGUgfHwgby5zdGF0ZUNkIHx8IG8uc3RhdGVDb2RlIHx8IG8uYWRkcmVzc1N0YXRlQ29kZSB8fCAnJztcbiAgICBsZXQgemlwID0gby56aXAgfHwgby56aXBDZCB8fCBvLnppcENvZGUgfHwgby56aXBjb2RlIHx8ICcnO1xuXG4gICAgY29uc3QgYWxsID0gbGluZTEgKyBsaW5lMiArIGNpdHkgKyBzdGF0ZSArIHppcDtcbiAgICBpZiAoYWxsLnRyaW0oKSA9PT0gJycpIHJldHVybiBlbXB0eVZhbHVlO1xuXG4gICAgaWYgKHppcCkgemlwID0gbmV3IFppcENvZGVQaXBlKCkudHJhbnNmb3JtKHppcCk7XG5cbiAgICBpZiAoYXBwbHlUaXRsZUNhc2UgPT09IHRydWUpIHtcbiAgICAgIGNvbnN0IHRpdGxlQ2FzZVBpcGUgPSBuZXcgVGl0bGVDYXNlUGlwZSgpO1xuICAgICAgbGluZTEgPSB0aXRsZUNhc2VQaXBlLnRyYW5zZm9ybShsaW5lMSk7XG4gICAgICBsaW5lMiA9IHRpdGxlQ2FzZVBpcGUudHJhbnNmb3JtKGxpbmUyKTtcbiAgICAgIGNpdHkgPSB0aXRsZUNhc2VQaXBlLnRyYW5zZm9ybShjaXR5KTtcbiAgICB9XG5cbiAgICBjb25zdCB1c3BzID0gcGF0dGVybiA9PT0gJ3VzcHMnO1xuICAgIGNvbnN0IGxpbmVzID0gW2xpbmUxXTtcbiAgICBpZiAobGluZTIpIGxpbmVzLnB1c2gobGluZTIpO1xuICAgIGlmIChpc0hUTUwpIHtcbiAgICAgIGxldCBzID0gJyc7XG4gICAgICBpZiAobGluZTEgfHwgbGluZTIpIHtcbiAgICAgICAgcyArPSBsaW5lcy5qb2luKHVzcHMgPyAnICcgOiAnPGJyPicpICsgJzxicj4nO1xuICAgICAgfVxuICAgICAgaWYgKGNpdHkpIHMgKz0gY2l0eTtcbiAgICAgIGlmIChjaXR5ICYmIChzdGF0ZSB8fCB6aXApKSBzICs9ICcsICc7XG4gICAgICBpZiAoc3RhdGUpIHMgKz0gc3RhdGU7XG4gICAgICBpZiAocy5sZW5ndGgpIHMgKz0gJzxicj4nO1xuICAgICAgaWYgKHppcCkgcyArPSB6aXA7XG4gICAgICByZXR1cm4gYDxhZGRyZXNzPiR7c308L2FkZHJlc3M+YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtsaW5lcy5qb2luKCcgJyksIGNpdHksIHN0YXRlLCB6aXBdXG4gICAgICAgIC5tYXAoKHMpID0+IHMudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKChzKSA9PiBzICE9PSAnJylcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgfVxuICB9XG59XG4iXX0=